{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = 'http://localhost:5000';\nconst NoteService = {\n  getAllNotes: async token => {\n    try {\n      const response = await axios.get(`${BASE_URL}/notes`, {\n        headers: {\n          Authorization: token\n        }\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  addNote: async (noteData, token) => {\n    try {\n      const response = await axios.post(`${BASE_URL}/notes`, noteData, {\n        headers: {\n          Authorization: token\n        }\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  deleteNote: async (noteId, token) => {\n    try {\n      const response = await axios.delete(`${BASE_URL}/notes/${noteId}`, {\n        headers: {\n          Authorization: token\n        }\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  getAverage: async token => {\n    try {\n      const response = await axios.get(`${BASE_URL}/average`, {\n        headers: {\n          Authorization: token\n        }\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  register: async userData => {\n    try {\n      const response = await axios.post(`${BASE_URL}/register`, userData);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  login: async userData => {\n    try {\n      const response = await axios.post(`${BASE_URL}/login`, userData);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\nexport default NoteService;","map":{"version":3,"names":["axios","BASE_URL","NoteService","getAllNotes","token","response","get","headers","Authorization","data","error","addNote","noteData","post","deleteNote","noteId","delete","getAverage","register","userData","login"],"sources":["C:/Users/c22du/Documents/Projets/Moyap/gestion-des-notes/src/components/NoteService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst BASE_URL = 'http://localhost:5000';\r\n\r\nconst NoteService = {\r\n  getAllNotes: async (token) => {\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}/notes`, {\r\n        headers: { Authorization: token },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  addNote: async (noteData, token) => {\r\n    try {\r\n      const response = await axios.post(`${BASE_URL}/notes`, noteData, {\r\n        headers: { Authorization: token },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  deleteNote: async (noteId, token) => {\r\n    try {\r\n      const response = await axios.delete(`${BASE_URL}/notes/${noteId}`, {\r\n        headers: { Authorization: token },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getAverage: async (token) => {\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}/average`, {\r\n        headers: { Authorization: token },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  register: async (userData) => {\r\n    try {\r\n      const response = await axios.post(`${BASE_URL}/register`, userData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  login: async (userData) => {\r\n    try {\r\n      const response = await axios.post(`${BASE_URL}/login`, userData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default NoteService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,uBAAuB;AAExC,MAAMC,WAAW,GAAG;EAClBC,WAAW,EAAE,MAAOC,KAAK,IAAK;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,GAAGL,QAAQ,QAAQ,EAAE;QACpDM,OAAO,EAAE;UAAEC,aAAa,EAAEJ;QAAM;MAClC,CAAC,CAAC;MACF,OAAOC,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAEDC,OAAO,EAAE,MAAAA,CAAOC,QAAQ,EAAER,KAAK,KAAK;IAClC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACa,IAAI,CAAC,GAAGZ,QAAQ,QAAQ,EAAEW,QAAQ,EAAE;QAC/DL,OAAO,EAAE;UAAEC,aAAa,EAAEJ;QAAM;MAClC,CAAC,CAAC;MACF,OAAOC,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAEDI,UAAU,EAAE,MAAAA,CAAOC,MAAM,EAAEX,KAAK,KAAK;IACnC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACgB,MAAM,CAAC,GAAGf,QAAQ,UAAUc,MAAM,EAAE,EAAE;QACjER,OAAO,EAAE;UAAEC,aAAa,EAAEJ;QAAM;MAClC,CAAC,CAAC;MACF,OAAOC,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAEDO,UAAU,EAAE,MAAOb,KAAK,IAAK;IAC3B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,GAAGL,QAAQ,UAAU,EAAE;QACtDM,OAAO,EAAE;UAAEC,aAAa,EAAEJ;QAAM;MAClC,CAAC,CAAC;MACF,OAAOC,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAEDQ,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC5B,IAAI;MACF,MAAMd,QAAQ,GAAG,MAAML,KAAK,CAACa,IAAI,CAAC,GAAGZ,QAAQ,WAAW,EAAEkB,QAAQ,CAAC;MACnE,OAAOd,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAEDU,KAAK,EAAE,MAAOD,QAAQ,IAAK;IACzB,IAAI;MACF,MAAMd,QAAQ,GAAG,MAAML,KAAK,CAACa,IAAI,CAAC,GAAGZ,QAAQ,QAAQ,EAAEkB,QAAQ,CAAC;MAChE,OAAOd,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAeR,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}